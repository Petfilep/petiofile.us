require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const mysql = require('mysql2/promise');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const pool = mysql.createPool({
  host: 'us.mysql.db.bot-hosting.net',
  user: 'u414905_zyct3MrOr2',
  password: '@YJ3JG0ApAJFRE2BBDg6Jy=Y',
  database: 's414905_petiofile'
});

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/payment_screenshots');
  },
  filename: function (req, file, cb) {
    const uniqueName = Date.now() + '-' + file.originalname;
    cb(null, uniqueName);
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 },  // 10 MB max
});

const app = express();
app.use(express.json());
app.use('/uploads', express.static('uploads'));
app.use(cors({
  origin: process.env.FRONTEND_ORIGIN,
  credentials: true
}));

const db = mysql.createPool({
  host: process.env.DATABASE_HOST,
  port: process.env.DATABASE_PORT,
  user: process.env.DATABASE_USER,
  password: process.env.DATABASE_PASS,
  database: process.env.DATABASE_NAME
});

(async () => {
  await db.query(`CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    reset_token VARCHAR(255)
    )`);
  await db.query(`CREATE TABLE IF NOT EXISTS carts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    customer_name VARCHAR(255),
    customer_email VARCHAR(255),
    customer_address VARCHAR(255),
    customer_city VARCHAR(255),
    customer_phone VARCHAR(20),
    item TEXT,
    quantity INT,
    total VARCHAR(255)
  )`);


})();


function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'No token provided' });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
}

app.use(express.static(__dirname)); 


app.post("/api/signup", async (req, res) => {
  const { username, email, password } = req.body;
  const hashed = bcrypt.hashSync(password, 10);
  try {
    await db.query("INSERT INTO users (username, email, password) VALUES (?, ?, ?)", [username, email, hashed]);
    res.status(201).json({ message: "User registered" });
  } catch (err) {
    console.error(err);
    res.status(400).json({ message: "Email already exists" });
  }
});

app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;
  const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
  const user = rows[0];
  if (user && bcrypt.compareSync(password, user.password)) {
    const token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET, { expiresIn: "2h" });
    res.json({ token });
  } else {
    res.status(401).json({ message: "Invalid credentials" });
  }
});

app.post('/api/upload-to-imgur', upload.single('image'), async (req, res) => {
  try {
    const imageBuffer = req.file.buffer.toString('base64');

    const response = await axios.post('https://api.imgur.com/3/image', {
      image: imageBuffer,
      type: 'base64'
    }, {
      headers: {
        Authorization: 'Client-ID 11268f9d43fb0b9'
      }
    });

    res.json({ link: response.data.data.link });
  } catch (err) {
    console.error('Imgur upload error:', err.message);
    res.status(500).json({ error: 'Failed to upload to Imgur' });
  }
});

app.post('/api/order', upload.single('paymentScreenshot'), async (req, res) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  let userId = null;
  if (token) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      userId = decoded.id;
    } catch {
      // guest order
    }
  }

  const {
    customerName, customerEmail, customerAddress,
    customerCity, customerPhone, item, quantity, total
  } = req.body;

  const paymentScreenshot = req.file ? `/uploads/payment_screenshots/${req.file.filename}` : null;

  await db.query(
    'INSERT INTO carts (user_id, customer_name, customer_email, customer_address, customer_city, customer_phone, item, quantity, total, payment_screenshot) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
    [userId, customerName, customerEmail, customerAddress, customerCity, customerPhone, item, quantity, total, paymentScreenshot]
  );

  res.json({ message: 'Order saved successfully' });
});


app.get('/api/orders', async (req, res) => {
  try {
    const [results] = await pool.query('SELECT * FROM carts');
    res.json(results);
  } catch (err) {
    console.error('Query error:', err);
    res.status(500).json({ error: 'Database error' });
  }
});

app.put('/api/orders/:id/status', async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  try {
    const [result] = await pool.query('UPDATE carts SET status = ? WHERE id = ?', [status, id]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'Order not found' });
    }
    res.json({ message: 'Status updated successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Failed to update status' });
  }
});


app.get("/api/profile", async (req, res) => {
  const auth = req.headers.authorization;
  if (!auth) return res.status(401).json({ message: "No token" });
  try {
    const token = auth.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const [rows] = await db.query("SELECT username, email FROM users WHERE id = ?", [decoded.id]);
    res.json(rows[0]);
  } catch {
    res.status(403).json({ message: "Invalid token" });
  }
});

app.post("/api/cart/add", async (req, res) => {
  const { token, item, quantity } = req.body;
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    await db.query("INSERT INTO carts (user_id, item, quantity) VALUES (?, ?, ?)", [decoded.id, item, quantity]);
    res.json({ message: "Item added" });
  } catch {
    res.status(403).json({ message: "Invalid token" });
  }
});

app.get("/api/cart", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const [rows] = await db.query("SELECT item, quantity FROM carts WHERE user_id = ?", [decoded.id]);
    res.json(rows);
  } catch {
    res.status(403).json({ message: "Invalid token" });
  }
});

app.post("/api/logout", (req, res) => {
  res.status(200).json({ message: "Logout handled client-side" });
});

app.post('/api/products', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'products.json');
  const { title, price, oldPrice, image, sale } = req.body;

  if (!title || !price || !image) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading products.json:', err);
      return res.status(500).json({ error: 'Failed to read products' });
    }

    let products = [];
    try {
      products = JSON.parse(data);
    } catch (parseErr) {
      console.error('Error parsing products.json:', parseErr);
      return res.status(500).json({ error: 'Invalid product data' });
    }

    const newProduct = {
      id: products.length ? products[products.length - 1].id + 1 : 1,
      title,
      price,
      oldPrice,
      image,
      sale
    };

    products.push(newProduct);

    fs.writeFile(filePath, JSON.stringify(products, null, 2), err => {
      if (err) {
        console.error('Error writing to products.json:', err);
        return res.status(500).json({ error: 'Failed to save product' });
      }
      res.json({ success: true, product: newProduct });
    });
  });
});

app.put('/api/products/:id', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'products.json');
  const { id } = req.params;
  const { title, price, oldPrice, image, sale } = req.body;

  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) return res.status(500).json({ error: 'Failed to read products' });

    let products = JSON.parse(data);
    const index = products.findIndex(p => p.id == id);
    if (index === -1) return res.status(404).json({ error: 'Product not found' });

    products[index] = { ...products[index], title, price, oldPrice, image, sale };

    fs.writeFile(filePath, JSON.stringify(products, null, 2), err => {
      if (err) return res.status(500).json({ error: 'Failed to update product' });
      res.json({ success: true, product: products[index] });
    });
  });
});


app.get('/api/products', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'products.json');
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading products.json:', err);
      return res.status(500).json({ error: 'Failed to load products' });
    }
    try {
      const products = JSON.parse(data);
      res.json(products);
    } catch (parseErr) {
      console.error('Error parsing products.json:', parseErr);
      res.status(500).json({ error: 'Invalid product data' });
    }
  });
});

app.delete('/api/products/:id', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'products.json');
  const productId = parseInt(req.params.id);

  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading products.json:', err);
      return res.status(500).json({ error: 'Failed to read product file' });
    }

    let products = JSON.parse(data);
    const newProducts = products.filter(p => p.id !== productId);

    if (newProducts.length === products.length) {
      return res.status(404).json({ error: 'Product not found' });
    }

    fs.writeFile(filePath, JSON.stringify(newProducts, null, 2), (err) => {
      if (err) {
        console.error('Error writing products.json:', err);
        return res.status(500).json({ error: 'Failed to delete product' });
      }

      res.json({ success: true });
    });
  });
});

app.get("/", (req, res) => {
  res.json({ message: "Petio API is live with MySQL!" });
});

const PORT = process.env.PORT || 21136;
app.listen(PORT, () => console.log(`✅ PetioFile backend running on port ${PORT}`));

